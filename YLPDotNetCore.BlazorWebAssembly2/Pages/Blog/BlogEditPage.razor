@page "/blog/edit/{id}"
@using System.Text
@using static System.Net.Mime.MediaTypeNames
@inject HttpClient httpClient
@inject NavigationManager nav
@inject IJSRuntime jsRuntime


<h3>Blog Edit Page</h3>
<div class="m-5 p-5 border border-1">
    <div class="mb-3">
        <label class="form-label">Blog Title</label>
        <input type="text" class="form-control" @bind-value="@blog.BlogTitle">
    </div>
    <div class="mb-3">
        <label class="form-label">Blog Author</label>
        <input type="text" class="form-control" @bind-value="@blog.BlogAuthor">
    </div>
    <div class="mb-3">
        <label class="form-label">Blog Content</label>
        <input type="text" class="form-control" @bind-value="@blog.BlogContent">
    </div>

    <button type="button" class="btn btn-primary" @onclick="Update">Update</button>
    <NavLink href="/blog" class="btn btn-outline-secondary">Back</NavLink>
</div>

@code {
    [Parameter]
    public string? id { get; set; }

    private BlogModel blog = new BlogModel();

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await httpClient.GetAsync($"/api/blog/{id}");
            if (!response.IsSuccessStatusCode)
            {
                nav.NavigateTo("/blog");
            }

            var jsonStr = await response.Content.ReadAsStringAsync();
            // Console.WriteLine(jsonStr);
            blog = JsonConvert.DeserializeObject<BlogModel>(jsonStr)!;
            StateHasChanged();
        }
    }

    private async Task Update()
    {
        var jsonBlog = JsonConvert.SerializeObject(blog);
        var content = new StringContent(jsonBlog, Encoding.UTF8, Application.Json);
        var response = await httpClient.PutAsync($"/api/blog/{id}", content);
        if (response.IsSuccessStatusCode)
        {
            var jsonStr = await response.Content.ReadAsStringAsync();
            // Console.WriteLine(jsonStr);
            await jsRuntime.InvokeVoidAsync("alert", jsonStr);
            nav.NavigateTo("/blog");
        }
    }

}
